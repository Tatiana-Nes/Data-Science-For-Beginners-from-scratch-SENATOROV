# %%
"""Список вопросов по работе с Issues на GitHub."""

# Общие вопросы
# 1.  Что такое Issues на GitHub и для чего они используются?
#     Issues на GitHub — это инструмент для отслеживания задач, багов, предложений и обсуждений, связанных с проектом.
#     Они используются для организации работы. Каждый Issue позволяет описать проблему или задачу, обсудить её с командой, назначить ответственных и отслеживать статус выполнения.
#
# 2.  Чем Issues отличаются от других инструментов управления задачами?
#     Тем, что Issues интегрированы в платформу GitHub. Они позволяют связывать коммиты и пул-реквесты с конкретными задачами. Issues позволяет управлять своими проектами без необходимости переключаться между разными инструментами.
#
#
# 3.  Какие основные компоненты (поля) есть у каждого Issue?
#     - Заголовок (Title): Краткое описание задачи или проблемы.
#     - Описание (Description): Подробное объяснение задачи.
#     - Комментарии (Comments): Раздел для обсуждения задачи, где участники могут задавать вопросы, предлагать решения и делиться
#       обновлениями.
#     - Метки (Labels): Теги, которые помогают классифицировать и фильтровать Issues по категориям.
#     - Исполнители (Assignees): Пользователи, ответственные за выполнение задачи.
#     - Milestones: Дедлайн, к которому привязан Issue.
#     - Статус (Open/Closed): Указывает, активен ли Issue или уже решён.
#
# Создание Issues
# 4.  Как создать новое Issue в репозитории?
#     1) В репозиторий на GitHub нажать на вкладку "Issues" в верхнем меню.
#     2) Нажать "New issue"
#     3) Выбрать шаблон: Bug report, Feature request или другой.
#     4) Появится окно с Title и Description, заполнить ссылаясь на проблему или задачу.
#     5) Добавить Labels
#     6) установить Milestone, если это необходимо.
#     7) Нажать "Submit new issue" для создания Issue.
#
# 5.  Какие данные рекомендуется указывать в описании Issue для лучшего понимания задачи?
#     - Название ошибки или задачи.
#     - Подробное описание проблемы или задачи.
#     - файл в котором возникла проблема или вопрос
#     - Ссылку на коммит или пул-реквест, чтобы связать Issue с конкретными изменениями в коде.
#
# 6.  Какие теги (labels) можно добавить к Issue? Какие из них стандартные?
#      - bug: Используется для обозначения багов или ошибок в коде.
#      - enhancement: Используется для предложений по улучшению функциональности.
#      - question: Используется для вопросов или запросов на информацию.
#      - documentation: Используется для задач, связанных с документацией.
#      - help wanted: Указывает, что помощь в решении задачи приветствуется.
#      - good first issue: Помечает задачи, которые подходят для новых участников проекта.
#      - wontfix: Указывает, что задача не будет решена.
#      - invalid: Указывает, что Issue не является действительным или релевантным.
#      - duplicate: Указывает, что Issue является дубликатом другого Issue.
#     Кроме стандартных меток, можно создавать свои собственные метки, чтобы лучше классифицировать задачи конкретного проекта.
#
# 7.  Как прикрепить Assignees (ответственных) к Issue?
#     1) Открыть Issue, к которому хотим назначить ответственных.
#     2) В правой боковой панели найти раздел "Assignees".
#     3) Чтобы назначить себя нужно нажать на значок шестерёнки или "Assign yourself".
#     4) нажать на поле "Assignees" и выбрать из выпадающего списка тех пользователей, которые имеют доступ к репозиторию и будут
#        добавлены в качестве ответственных за выполнение задачи.
#     Назначенные пользователи получат уведомление о назначении.
#
# Работа с Issues
# 8.  Как использовать Labels для классификации задач?
#     Чтобы быстро идентифицировать природу задачи нужно создавать метки под разные типы задач, таких как bug или documentation
#     Метки удобно использовать для информации под приоритеты задач, а также для отслеживания статуса
#     Метки можно использовать для группировки задач по темам или компонентам проекта, а также  для фильтрации списка Issues, чтобы быстро находить задачи, соответствующие определённым критериям.
#
# 9.  Для чего нужен Milestone, и как связать его с Issue?
#     Milestone на GitHub используется для группировки связанных Issues и пул-реквестов, которые должны быть выполнены в рамках определённого срока.
#
# 10. Как привязать Issue к пул-реквесту (Pull Request)?
#     Открыть пул-реквест, который хотим связать с Issue.
#     В описании пул-реквеста используем closes #номер Issue, который хотим закрыть при слиянии пул-реквеста.
#     Когда пул-реквест будет смержен, указанный Issue автоматически закроется.
#     Чтобы связать Issue с пул-реквестом, нужно добавить ссылку на Issue в описании пул-реквеста, но для автоматического закрытия необходимо использовать ключевые слова.
#
# 11. Как добавить комментарий к существующему Issue?
#     Перейдите в репозиторий на GitHub и открыть вкладку "Issues".
#     Найти и откроыть Issue, к которому хотим добавить комментарий, внизу страницы в текстовом поле Leave a comment ввести комментарий.
#     Нажать Comment
#     Все Assignees подписанные на уведомления по этому Issue, получат уведомление о новом комментарии.
#
#
# Закрытие и завершение Issues
# 12. Как закрыть Issue вручную?
#     Открыть Issue, который хотим закрыть.
#     В правой боковой панели найти кнопку "Close issue" и нажать её.
#     Issue будет помечен как закрытый и перемещён в список закрытых Issues.
#
#
# 13. Можно ли автоматически закрыть Issue с помощью сообщения в коммите или пул-реквесте? Как это сделать?
#     Да, можно. В сообщении коммита или описании пул-реквеста нужно использовать closes #номер Issue. Например, fixes #123 автоматически закроет Issue с номером 123 при слиянии коммита или пул-реквеста.
#
# 14. Как повторно открыть закрытое Issue, если работа ещё не завершена?
#     В правой боковой панели найти кнопку "Reopen issue" и нажать её.
#     Issue будет перемещён обратно в список открытых Issues и снова станет активным.
#
# Фильтрация и поиск.
# 15. Как найти все открытые или закрытые Issues в репозитории?
#     В верхней части страницы есть фильтры. Чтобы увидеть только открытые Issues, выбрать "Open". Чтобы увидеть закрытые, выбрать "Closed".
#     Можно также использовать строку поиска для поиска по ключевым словам, меткам, исполнителям и другим критериям.
#
# 16. Как использовать фильтры для поиска Issues по меткам, исполнителям или другим критериям?
#     В репозитории открыть вкладку "Issues".
#     В верхней части страницы есть строка поиска и фильтры.
#     Для более точного поиска можно использовать синтаксис поиска, например:
#     is:open - для поиска открытых Issues
#     is:closed - для поиска закрытых Issues
#     label:bug - для поиска Issues с меткой "bug"
#     assignee:username - для поиска Issues, назначенных на конкретного пользователя.
#     Комбинировать условия, например: is:open label:enhancement assignee:username
#
# 17. Как сортировать Issues по приоритету, дате создания или другим параметрам?
#     В репозитории во вкладке "Issues" в верхней части страницы есть опция "Sort" (Сортировать).
#     Нажать на "Sort" и выбрать нужный параметр сортировки, например:
#     - Newest: Сортировка по дате создания, от новых к старым.
#     - Oldest: Сортировка по дате создания, от старых к новым.
#     - Most commented: Сортировка по количеству комментариев, от большего к меньшему.
#     - Least commented: Сортировка по количеству комментариев, от меньшего к большему.
#     - Recently updated: Сортировка по дате последнего обновления, от новых к старым.
#     - Least recently updated: Сортировка по дате последнего обновления, от старых к новым.
#
# Интеграции и автоматизация
# 18. Как настроить автоматические уведомления о новых или изменённых Issues?
#     В репозитории открыть вкладку "Settings".
#     В меню слева выбрать "Notifications".
#     Настроить параметры уведомлений, выбрав, какие события (например, создание или изменение Issues) должны вызывать уведомления.
#
# 19. Что такое Projects в контексте GitHub, и как связать их с Issues?
#     GitHub Projects — это инструмент для управления проектами, который позволяет организовывать задачи (Issues и пул-реквесты) в виде досок с колонками. Это помогает визуализировать рабочий процесс и отслеживать прогресс выполнения задач.
#     Чтобы связать Issues с Projects:
#     Открыть репозиторий и перейти на вкладку "Projects".
#     Создать новый проект или открыть существующий.
#     Чтобы добавить Issue в проект, открыть нужный Issue.
#     В правой боковой панели найти раздел "Projects" и выбрать проект и колонку, куда добавить Issue.
#     Issue будет отображаться в выбранной колонке проекта, и его можно будет перемещать между колонками по мере выполнения задачи.
#
# 20. Какие сторонние инструменты можно использовать для автоматизации работы с Issues (например, боты, Webhooks)?
#     - Probot: Платформа для создания GitHub ботов, которые могут автоматически реагировать на события в репозитории, такие как
#       создание или изменение Issues.
#     - Zapier: Сервис для автоматизации рабочих процессов, который позволяет интегрировать GitHub с другими приложениями
#       (например, Slack, Trello) для автоматического создания задач или отправки уведомлений.
#     - IFTTT: Платформа для создания простых автоматизаций между различными сервисами, включая GitHub Webhooks: Встроенная
#       функция GitHub, которая позволяет отправлять HTTP POST запросы на указанный URL при определённых событиях (например, создание или изменение Issues). Это позволяет интегрировать GitHub с внешними системами для автоматической обработки событий.
#
# Коллаборация
# 21. Как упомянуть другого пользователя в комментарии к Issue?
#     Чтобы упомянуть другого пользователя в комментарии к Issue, нужно использовать символ "@" перед его именем пользователя. Например, чтобы упомянуть пользователя с именем "username", нужно написать @username в комментарии. Упомянутый пользователь получит уведомление о том, что его упомянули в комментарии.
#
# 22. Как запросить дополнительные данные или уточнения у автора Issue?
#     Оставить комментарий в самом Issue. В комментарии можно задать конкретные вопросы или попросить предоставить дополнительную информацию.
#
# 23. Что делать, если Issue неактуально или его нужно объединить с другим?
#     Если Issue неактуально, его можно закрыть, нажав кнопку "Close issue" в правой боковой панели. В комментарии к закрытию можно указать что проблема больше не актуальна.
#     Если Issue нужно объединить с другим, можно использовать метку "duplicate" для обозначения дубликата. В комментарии к Issue указать ссылку на основной Issue, с которым нужно объединить. После этого закрыть дублирующий Issue, указав в комментарии, что он является дубликатом другого.
#
# Практические аспекты
# 24. Как использовать шаблоны для создания Issues?
#     1) В репозитории создать папку .github/ISSUE_TEMPLATE.
#     2) В этой папке создать файлы с расширением .md для каждого шаблона (например, bug_report.md, feature_request.md).
#     3) В каждом файле описать структуру шаблона, включая заголовки и инструкции для заполнения.
#     4) При создании нового Issue на GitHub, пользователи смогут выбирать из доступных шаблонов, что поможет им правильно оформить
#        задачу.
#
# 25. Что такое Linked Issues, и как создать связь между задачами?
#     Это функция на GitHub, которая позволяет создавать связи между разными Issues и пул-реквестами. Это полезно для отслеживания зависимостей между задачами, например, когда одна задача зависит от выполнения другой.
#     Чтобы создать связь между задачами:
#     1) Открыть Issue или пул-реквест, который хотим связать с другим.
#     2) В правой боковой панели найти раздел "Linked issues".
#     3) Нажать "Link an issue" и выбрать Issue из списка или ввести его номер.
#     4) Выбрать тип связи, например, "blocks" (блокирует), "is blocked by" (заблокирован) или "relates to" (связан с).
#     5) Нажать "Link" для создания связи.
#
# 26. Какие метрики (например, время выполнения) можно отслеживать с помощью Issues?
#     - Время до закрытия (Time to Close): Время, прошедшее с момента создания Issue до его закрытия.
#     - Количество комментариев
#     - Количество открытых и закрытых Issues
#     - Среднее время ответа: Время, которое проходит между созданием Issue и первым комментарием или ответом от команды.
#     - Количество переоткрытий: Сколько раз Issue было закрыто и затем повторно открыто, что может указывать на сложность задачи
#       или недостаток информации.
#     - Распределение по меткам: Анализ количества Issues по разным меткам (например, баги, улучшения) для понимания основных
#       проблем в проекте.
#
# 27. Какие best practices рекомендуются при работе с Issues в команде?
#     Чётко формулировать заголовки и описания Issues, чтобы было понятно, о чём задача.
