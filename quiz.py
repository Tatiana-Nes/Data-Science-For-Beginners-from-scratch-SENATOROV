# 1)  Как понять, что домашка пришла?
#     в чате h/w появится обращение с сообщением "прими пул"
# 2)  Как принять домашку?
#     зайти в git desktop, нажать кнопку fetch origin, в history смотрим самый первый комит
# 3)  Зачем нужна кнопка history и какие функции появляются при нажатии правой кнопки мыши на коммит?
#     Показывает историю всех коммитов в этом репозитории; функции при нажатии правой кнопки мыши:
#     создать новый коммит
#     сделать новую ветку
#     скопировать коммит в другую ветку
#     скопировать SHA
#     открыть в GitHub
#     3.1) Где брать ссылку на коммит? куда её отправлять?
#          В репозитории на гит хабе во вкладке комит в адресной строке будет ссылка
# 4)  Что такое файл лога?
#     Файл который нужно отправлять в конце каждого урока
#     4.1) Когда нужно его пушить?
#
# 5)  Что такое интерпритатор?
#     Интерпритатор - это программа, которая читает и запускает наш код
# 6)  Где можно выбрать интерпритатор?
#     Справа на верху кнопка "base"
# 7)  Что такое модуль?
#     Модуль - это обычный файлик .py или .ipynb
# 8)  Как создать и отправить коммит?
#     В GitHub во вкладке Changes появятся изменения отображаемые в формате json, пишем название комита и Commit to main, делаем push origin
# 9)  Как посмотреть что коммит точно отправлен и находится в github?
#     Во вкладке History, нажимаем на отправленный коммит - View on Github
# 10) Какая команда показывает что код не прошёл проверки на ошибки?
#     Команда pre-commit run --all-files
#     10.1) Напишите список линтеров которые используются для проверки кода и дайте их краткую характеристику.
#           Pylint - проверяет код на соответствие стандартам PEP 8 (синтаксические ошибки/опечатки, стилистические ошибки - отступы, длина строки)
#           Pydocstyle — проверяет корректность и наличие документационных строк в коде
#           Flake8 - проверяет логические ошибки, неиспользуемые переменные, форматирование
#           Mypy - проверяет код на соответствие типов
# 11) Как узнать какой именно линтер не прошёл проверку?
#     В терминале запускаем pre-commit run --all-files, там где отображается красным будет название линтера который не прошел проверку
# 12) Линтер Pylint видит markdown?
#     Нет.
# 13) Номер ячейки в терминале и номер ячейки в vs code может отличаться? в каком случае?
#     Да, так как линтеры не видят markdown, номер этой ячейки будет пропускаться
# 14) Где посмотреть номер ячейки в vscode?
#     Внизу справа кнопка Cell
# 15) В каком формате ipynb отправляется в гитхаб? причём здесь JSON?
#     ipynb отображает всё в формате JSON
# 16) Где посмотреть в какой ячейке ошибка?
#     В терминале после запуска на проверку pre-commit run --all-files, будет информация имя файла и в какой ячейке ошибка
# 17) Как запустить терминал?
#     Клавиши ^ + ` или View Terminal
# 18) Что такое линтер?
#     Линтер - программа, проверяющая файл на корректность
# 19) В какой сайт нужно вставлять код ошибки если ошибка связана с pylint?
#     На сайте pylint
# 20) Секция pydocstyle в большинстве случае автоматический закрывается после исправления ошибок в каком линтере?
#     В лмнтере pylint
# 21) Что такое описание модуля? Оно должно отражать информацию о том что находится в модуле?
#     Да
#     21.1) С какой  git команды начинается утро программиста?
#
# 22) После внесения изменений в файлах, кнопка open in vs code пропадает в кошке, как по другому открыть vs code из кошки?
#     Навести курсор на текущий репозиторий, нажать правую кнопку мыши и выбрать из меню open in vs code
# 23) Что такое stash? Общее объяснение концепции.
#     Означает что два человека работают в одном файле в интернете и на локальном компьютере, Гит хаб просит сохранить временные изменения в буфер обмена, для того чтобы принять новый комит
#     23.1) Как сохранить стэш? git командa(подсказка: https://t.me/c/1937296927/3602/19531):
#           git stash push -m
#           Кнопка в vs code:
#           в окошке слева внизу (Ctrl + Shift + G) если навести на "..." выбрать Stash
#     23.2) Как восстановить стэш(подсказка: https://t.me/c/1937296927/3602/25747)?:
#           В окошке слева внизу (Ctrl + Shift + G) если навести на "..." выбрать Apply Stash
#           git команда(подсказка: https://t.me/c/1937296927/3602/19531)?:
#           git stash apply
#     23.3) Различие между стэшем и коммитом. Когда лучше сохранить изменения в стэше, а когда коммитить.
# 	        Стэш — временное место для незакомиченных изменений, которые можно потерять,а комит - изменения в коде которые были сохранены, к которым можно вернуться.
#           Стэш используют тогда, когда нужно переключиться на другую задачу, но эта еще не готова. Комит - когда завершена какая-то часть работы и эти изменения нужно отобразить в истории изменений
#     23.4) Как просмотреть список сохраненных стэшей?  git команда (подсказка: https://t.me/c/1937296927/3602/19531):
#           git stash list
#     23.5) Как удалить стэш? Команды для удаления отдельных стэшей или всех сразу.
#           В окошке слева внизу (Ctrl + Shift + G) если навести на "..." выбрать Pop Stash
#           git команда (подсказка: https://t.me/c/1937296927/3602/19531):
#           git stash drop
#     23.6) Практические примеры использования стэша. Краткие сценарии, где стэш помогает.
#           При решении конфликта;
#           Если начали работать не в той ветке или для того чтобы перенести в новую, стэш позволят переключиться сохранив текущие изменения
# 24) Где посмотреть что есть конфликт в файлах?
#     В Desktop появится значок с восклицательным знаком
#     24.1) Когда он появляется?
#           Когда Гит не понимает какие изменения сохранить
# 25) Как решить конфликт в файлах?
#     Необходимо либо удалить изменения которые были сделаны до твоих, либо к новым изменениям применить свои, либо оставить только свои, удаляя новые изменения сделанные не тобой.
# 26) Напишиие правильное утверждение: "Зелёное то что пришло с гитхаба и синее локальные изменения" или "синее то что пришло с гитхаба
#     и зелёное это локальные изменения"
#     Зелёное то что пришло с гитхаба и синее локальные изменения
# 27) Если мы работаем в одном файле, можно ли принять pull после того как вы спрячете в стэш свои изменения?
#     да
#     27.1) Что может произойти когда stash восстановите после принятия pull?
#     Появится информация о конфликте
# 28) Сколько способов решения конфликтов было показано в видео? Напишите ЧИСЛО и укажите их способы.
#     4:
#     accept current change - сохранить изменения с гит хаба
#     accept incoming change - сохранить свои изменения, но тогда изменения с гит хаба не сохранятся
#     accept both changes - принять оба изменения
#     устранить конфликт в ручную
# 29) Что делает кнопка complete merge?
#     Завершает устранение кофликта
# 30) В какой чат нужно писать если остались вопросы?
#     В чат help me
# 31) Что такое FORK? Зачем его делают?
#     Это операция скопировать чужой репозиторий в личный аккаунт гитхаба и сдедать его личным.
# 32) Как скачать форкнутый репозиторий на локальный компьютер?
#     Зайти в desktop и склонировать репозиторий нажав clone repositories, выбрвать нужный репозиторий, нажать clone
# 33) С какой вероятностью ваши ошибки были уже решены? и кто их решил?
#     С вероятностью 99% эти ошибки были решены преподавателем курса или другими студентами
# 34) Как создать файл в vs code?
#     Справа нажать на листочки, листочек с +,  написать название файла
# 35) Файл лога нужно заполнять в конце каждого урока?
#     Да.
#
# ==================
#
# Дополнительные вопросы:
# 1) Какая команда конвертирует файл в py из ipynb? подсказка https://t.me/c/1937296927/1/26527
#    jupyter nbconvert --to script notebook.ipynb
# 2) Что такое пакетный менеджер? Вы пользуетесь пакетным менеджером conda или pip? Какой лучше использовать для дата сайнс?
#    Инструмент который устанавливает библиотеки, может управлять окружением
#    Conda или оба
# 3) Почему расширение py лучше чем ipynb?
#    Удобен при контроле версий между комитами, изменяется построчно
# 4) Что такое pep8? подсказка:https://peps.python.org/pep-0008/
#    Документ который описывает официальный стиль написания кода на Python
#    4.1) линтеры проверяют на соблюдение pep8?
#         да
#    4.2) Какая нотация используется для создания переменных? ответ на 85-95 страницы https://t.me/c/1937296927/1/16676
#         строчные буквы, слова разделяются нижним подчеркиванием
#    4.3) Может ли переменная состоять из одной буквы например андерскор  "_" ?
#         да
#    4.4) Зачем и где мы используем андерскор _
#         при разделении слов в названии переменных
#    4.5) По PEP8 допустима переменная в одну букву? ответ на 85-95 страницы https://t.me/c/1937296927/1/16676
#         да
#
